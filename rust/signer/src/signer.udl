[Error]
interface ErrorDisplayed {
    Str(string s);
};

dictionary MetaValuesDisplay {
    string name;
    u32 version;
    sequence<u8> meta_hash;
};

[Custom]
typedef sequence<u8> H256;

[Custom]
typedef sequence<u8> Ed25519Public;

[Custom]
typedef sequence<u8> Sr25519Public;

[Custom]
typedef sequence<u8> EcdsaPublic;

[Custom]
typedef string MultiSigner;

[Enum]
interface VerifierValue {
    Standard(MultiSigner m);
};

dictionary Verifier {
    VerifierValue? v;
};

enum Encryption {
    "Ed25519",
    "Sr25519",
    "Ecdsa",
};

[Enum]
interface ValidCurrentVerifier {
    General();
    Custom(Verifier v);
};

dictionary NetworkSpecs {
    u16 base58prefix;
    string color;
    u8 decimals;
    Encryption encryption;
    H256 genesis_hash;
    string logo;
    string name;
    u8 order;
    string path_id;
    string secondary_color;
    string title;
    string unit;
};

dictionary NetworkSpecsToSend {
    u16 base58prefix;
    string color;
    u8 decimals;
    Encryption encryption;
    H256 genesis_hash;
    string logo;
    string name;
    string path_id;
    string secondary_color;
    string title;
    string unit;
};

dictionary NetworkSpecsDisplay {
    NetworkSpecs specs;
    ValidCurrentVerifier valid_current_verifier;
    Verifier general_verifier;
};


dictionary NetworkSpecsExport {
    NetworkSpecsToSend specs_to_send;
    VerifierValue signed_by;
};

dictionary NetworkVerifierDisplay {
    sequence<u8> genesis_hash;
    ValidCurrentVerifier valid_current_verifier;
    Verifier general_verifier;
};

dictionary TypesDisplay {
    sequence<u8> types_hash;
    Verifier verifier;
};

dictionary TypesExport {
    sequence<u8> types_hash;
    VerifierValue signed_by;
};

dictionary SignDisplay {
    sequence<u8> transaction;
    string network_name;
    VerifierValue signed_by;
    string user_comment;
};

dictionary SignMessageDisplay {
    string message;
    string network_name;
    VerifierValue signed_by;
    string user_comment;
};

dictionary IdentityHistory {
    string seed_name;
    Encryption encryption;
    sequence<u8> public_key;
    string path;
    sequence<u8> network_genesis_hash;
};

dictionary MetaValuesExport {
    string name;
    u32 version;
    sequence<u8> meta_hash;
    VerifierValue signed_by;
};

dictionary ActionResult {
    string? screen;
    string screen_label;
    boolean back;
    boolean footer;
    string footer_button;
    string right_button;
    string screen_name_type;
    string modal;
    string alert;
    ScreenData screen_data;
    string modal_data;
    string alert_data;
};

dictionary MetaValues {
    string name;
    u32 version;
    u16? optional_base58prefix;
    boolean warn_incomplete_extensions;
    sequence<u8> meta;
};

[Enum]
interface Event {
    MetadataAdded(MetaValuesDisplay meta_values_display);
    MetadataRemoved(MetaValuesDisplay meta_values_display);
    MetadataSigned(MetaValuesExport meta_values_export);
    NetworkSpecsAdded(NetworkSpecsDisplay network_specs_display);
    NetworkSpecsRemoved(NetworkSpecsDisplay network_specs_display);
    NetworkSpecsSigned(NetworkSpecsExport network_specs_export);
    NetworkVerifierSet(NetworkVerifierDisplay network_verifier_display);
    GeneralVerifierSet(Verifier verifier);
    TypesAdded(TypesDisplay types_display);
    TypesRemoved(TypesDisplay types_display);
    TypesSigned(TypesExport types_export);
    TransactionSigned(SignDisplay sign_display);
    TransactionSignError(SignDisplay sign_display);
    MessageSigned(SignMessageDisplay sign_message_display);
    MessageSignError(SignMessageDisplay sign_message_display);
    IdentityAdded(IdentityHistory identity_history);
    IdentityRemoved(IdentityHistory identity_history);
    IdentitiesWiped();
    DeviceWasOnline();
    ResetDangerRecord();
    SeedCreated(string seed_created);
    SeedNameWasShown(string seed_name_was_shown);
    Warning(string warning);
    WrongPassword();
    UserEntry(string user_entry);
    SystemEntry(string system_entry);
    HistoryCleared();
    DatabaseInitiated();
};

enum Action {
    "Start",
    "NavbarLog",
    "NavbarScan",
    "NavbarKeys",
    "NavbarSettings",
    "GoBack",
    "GoForward",
    "SelectSeed",
    "SelectKey",
    "NewKey",
    "RightButton",
    "Shield",
    "NewSeed",
    "RecoverSeed",
    "BackupSeed",
    "NetworkSelector",
    "NextUnit",
    "PreviousUnit",
    "ChangeNetwork",
    "CheckPassword",
    "TransactionFetched",
    "RemoveNetwork",
    "RemoveMetadata",
    "RemoveTypes",
    "SignNetworkSpecs",
    "SignMetadata",
    "SignTypes",
    "ManageNetworks",
    "ViewGeneralVerifier",
    "ManageMetadata",
    "RemoveKey",
    "RemoveSeed",
    "ClearLog",
    "CreateLogComment",
    "ShowLogDetails",
    "Swipe",
    "LongTap",
    "SelectAll",
    "ExportMultiSelect",
    "Increment",
    "ShowDocuments",
    "TextEntry",
    "PushWord",
    "Nothing",
};

dictionary LogScreenEntry {
    u32 order;
    string timestamp;
    sequence<Event> events;
};

[Custom]
typedef string NetworkSpecsKey;

[Enum]
interface StubNav {
    AddSpecs(NetworkSpecsKey n);
    LoadMeta(NetworkSpecsKey l);
    LoadTypes();
};

[Enum]
interface TransactionAction {
    Derivations(string content, string network_info, u32 checksum, NetworkSpecsKey network_specs_key);
    Sign(string content, u32 checksum, boolean has_pwd, string author_info, string network_info);
    Stub(string s, u32 u, StubNav stub);
    Read(string r);
};

dictionary SeedNameWithIdenticon {
    string seed_name;
    string identicon;
};

dictionary RootNetworkId {
    string seed_name;
    string identicon;
    string address_key;
    string base58;
    boolean swiped;
    boolean is_multiselect;
};

dictionary OtherNetworkId {
    string address_key;
    string base58;
    string identicon;
    boolean has_pwd;
    string path;
    boolean swiped;
    boolean is_multiselect;
};

dictionary IdentitiesForSeedNameAndNetwork {
    RootNetworkId root;
    sequence<OtherNetworkId> set;
    string title;
    string logo;
};

dictionary ExportedKey {
    string qr;
    string pubkey;
    string address_base58;
    string identicon;
    string seed_name;
    string path;
    string network_title;
    string network_logo;
};

dictionary CollisionDisplay {
    string base58;
    string path;
    boolean has_pwd;
    string identicon;
    string seed_name;
};

dictionary DerivePrep {
    string seed_name;
    string network_title;
    string network_logo;
    string network_specs_key;
    string suggested_derivation;
    CollisionDisplay? collision;
};

dictionary NetworkDetails {
    NetworkSpecs specs;
    ValidCurrentVerifier current_verifier;
    Verifier general_verifier;
    sequence<MetaValues> meta_values;
};

dictionary Identity {
    string seed_name;
    string address_key;
    string public_key;
    string identicon;
    boolean has_pwd;
    string path;
    boolean is_multiselect;
    string base58;
};

[Enum]
interface ScreenData {
    Empty();
    LogData(sequence<LogScreenEntry> log);
    LogDetailsData(string details_data);
    SettingsData(Verifier verifier);
    SelectSeedForBackupData();
    VerifierData(Verifier verifier);
    DocumentsData();
    ManageNetworksData(sequence<NetworkSpecs> networks);
    NetworkDetailsData(NetworkDetails details);
    SignSufficientCryptoData();
    ScanData();
    TransactionData(TransactionAction t);
    SeedNamesWithIdenticons( sequence<SeedNameWithIdenticon> n);
    IdentitiesForSeedNameAndNetworkData(
        IdentitiesForSeedNameAndNetwork i,
        boolean multiselect_mode,
        string multiselect_count
    );
    ExportedKeyData(ExportedKey k);
    ExportedKeyDataMulti(ExportedKey k, u32 current_number, u32 out_of);
    KeyboardData(boolean keyboard);
    RecoverSeedNameData(string seed_name, boolean keyboard);
    RecoverSeedPhraseData(
        string seed_name,
        boolean keyboard,
        string user_input,
        sequence<string> guess_set,
        string draft
    );
    DerivePrepData(
        DerivePrep d,
        boolean keyboard
    );
    AllIdentitiesData(sequence<Identity> identities);
};

namespace signer {
    string action_get_name([ByRef] Action action);

    void init_navigation([ByRef] string dbname, [ByRef] string seed_names);

    [Throws=ErrorDisplayed]
    ActionResult backend_action(Action action, [ByRef] string details, [ByRef] string seed_phrase);

    void update_seed_names([ByRef] string seed_names);

    [Throws=ErrorDisplayed]
    u32 qrparser_get_packets_total([ByRef] string data, boolean cleaned);

    [Throws=ErrorDisplayed]
    string qrparser_try_decode_qr_sequence([ByRef] string data, boolean cleaned);

    string substrate_path_check([ByRef] string seed_name, [ByRef] string path, [ByRef] string network, [ByRef] string dbname);

    [Throws=ErrorDisplayed]
    void history_init_history_with_cert([ByRef] string dbname);

    [Throws=ErrorDisplayed]
    void history_init_history_no_cert([ByRef] string dbname);

    [Throws=ErrorDisplayed]
    void history_device_was_online([ByRef] string dbname);

    [Throws=ErrorDisplayed]
    boolean history_get_warnings([ByRef] string dbname);

    [Throws=ErrorDisplayed]
    void history_acknowledge_warnings([ByRef] string dbname);

    [Throws=ErrorDisplayed]
    void history_entry_system(Event event, [ByRef] string dbname);

    [Throws=ErrorDisplayed]
    void history_seed_name_was_shown([ByRef] string seed_name, [ByRef] string dbname);

    string get_all_tx_cards();

    string get_all_log_cards();
};
